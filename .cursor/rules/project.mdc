---
alwaysApply: true
---

# プロジェクトルール
<!-- feature3.1をfeature3にマージしてプッシュする順番を間違えてしまったため追記 -->
## 概要

ミスを管理するアプリ

## 各画面のルーティングとコンポーネント

### ミス詳細画面

### ダッシュボード画面
-ルーティング: retries/dashbord
-コンポーネント: retries.dashbord
-表示する内容:
   -アプリのタイトル「RETRY」
   -アプリのキャッチコピー「It’s okay to mess up!!」
   -今週のRETRYリスト
      -ミスのタイトル
      -日時
      -AI解決案
      -完了: チェックボックス
   -今週のミスリスト
      -ミスのタイトル
      -日時
      -AI解決案

 - ルーティング: retries/{retry}
 - コンポーネント: retries.show
 - 表示する内容 :
    - ミスのタイトル
    - ミスの日時
    - ミスの状況
    - ミスの原因
    - ミスの解決法
    - AI解決策
    - 補足
    - 編集

### ミス一覧画面

 - ルーティング: retries/index
 - コンポーネント: retries.index
 - 表示する内容:
    - ミスの一覧表示
      -検索: input
      -フィルター: button
         -modalで以下を表示
            -期間
            -タグ
               -タグ検索: input
               -タグ追加: button
            -検索: button
            -閉じる: button
      -ミスの内容
      -ミスのタイトル
      -タグ
      -解決策

### ミス作成画面

 - ルーティング:retries/create
 - コンポーネント: retries.create
 - ユーザーが記入、操作する内容
    - ミス登録
       -タイトル
       -日時
       -状況
       -原因
       -解決法
       -登録: button
       -Brash up: button
       -AI改善案
       -補足
       -Re:Brash up: button
       -AI解決策
    -タグ
       -タグの入力
       -タグの作成: button
       -タグの追加: button
       -リマインド
       -日時
    -保存: button

-バリデーション
    -タイトル: 必須、最大50文字
    -日時: 必須
    -状況: 必須、最大2000文字
    -原因: 必須、最大2000文字
    -解決法: 必須、最大2000文字
    -補足: 最大2000文字
    -タグの入力: 最大10文字
    -タグの追加: 必須

### ミス更新画面

-ルーティング:retries/{retry}/edit
-コンポーネント: retries.edit
-ユーザーが記入、操作する内容
    -ミス更新
    -タイトル
    -日時
    -状況
    -原因
    -解決法
    -更新: button
    -Brash up: button
    -Brash up結果を表示
    -AI解決策
    -補足
    -Re:Brash up: button
    -Re:Brash up結果を表示
    -タグ
    -タグの入力
    -タグの作成: button
    -タグの追加: button
    -リマインド
    -日時
    -保存: button

-バリデーション
 -タイトル: 必須、最大50文字
 -日時: 必須
 -状況: 必須、最大2000文字
 -原因: 必須、最大2000文字
 -解決法: 必須、最大2000文字
 -補足: 最大2000文字
 -タグの入力: 最大10文字
 -タグの追加: 必須

 ### 画面遷移
-ダッシュボード画面
 -ミス項目クリック → ミス詳細画面
-一覧画面
 -ミス項目クリック → ミス詳細画面
-ミス詳細画面
 -編集 → 編集画面
 -戻る → ミス一覧画面
 -削除 → ミス削除後にミス一覧画面
-ミス作成画面
 -保存 → ミス作成後にミス詳細画面
 -キャンセル → ミス一覧画面
-ミス更新画面
 -更新 → ミス更新後にミス詳細画面
 -キャンセル → ミス詳細画面

## API連携
Hugging Face経由でモデル:meta-llama/Llama-3.3-70B-Instructを利用し、AI改善案とAI改善案を生成する。
ただし、ボタンが2つあり、Brash up ボタンを押した場合はAI改善策を生成しmistakesテーブルのai_notesに保存。Re:Brash upボタンを押した場合はAI解決策を生成し、re_ai_notesに保存。

利用するデータ
-mistakesテーブル
   -Brash up ボタンを押した場合。
      -タイトル
      -日時
      -状況
      -原因
      -解決法

   -Re:Brash up ボタンを押した場合。
      -タイトル
      -日時
      -状況
      -原因
      -解決法
      -AI改善案
      -補足

-AI改善案とAI解決法の生成条件
 端的に箇条書きで記載すること。


